"""Telegram bot handlers for video processing."""

import logging
import asyncio
from telegram import Update, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from pathlib import Path
import tempfile
import os

from src.services.video_processor import VideoProcessor
from src.services.gemini_client import GeminiClient
from src.services.openai_client import OpenAIClient
from src.services.elevenlabs_client import ElevenLabsClient
from src.handlers.language_handler import LanguageHandler
from src.config import Config

logger = logging.getLogger(__name__)

class VideoAnalysisHandler:
    """Handler for video analysis functionality."""
    
    def __init__(self):
        """Initialize handler with required services."""
        self.video_processor = VideoProcessor()
        self.gemini_client = GeminiClient()
        self.openai_client = OpenAIClient()
        self.elevenlabs_client = ElevenLabsClient()
        self.language_handler = LanguageHandler()
        logger.info("Initialized VideoAnalysisHandler")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle incoming video messages.
        
        Args:
            update: Telegram update object
            context: Telegram context object
        """
        try:
            message = update.message
            video = message.video
            
            if not video:
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return
            
            # Check video size
            if video.file_size > Config.MAX_VIDEO_SIZE_MB * 1024 * 1024:
                file_size_mb = round(video.file_size / (1024 * 1024), 1)
                await message.reply_text(
                    f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!\n\n"
                    f"üìè –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ: {file_size_mb} –ú–ë\n"
                    f"üìê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_VIDEO_SIZE_MB} –ú–ë\n\n"
                    f"üí° –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                    f"‚Ä¢ –°–∂–∞—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ª—é–±–æ–≥–æ –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞\n"
                    f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ\n"
                    f"‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–∂–∞—Ç—ã–π –∫–æ–¥–µ–∫ (H.264)"
                )
                return
            
            # Send processing message
            processing_msg = await message.reply_text(
                "üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            )
            
            # Download video file
            video_file = await context.bot.get_file(video.file_id)
            
            # Create temporary file
            with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
                temp_path = Path(temp_file.name)
                await video_file.download_to_drive(temp_path)
            
            logger.info(f"Downloaded video to: {temp_path}")
            
            # Update progress
            await processing_msg.edit_text(
                "üé¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
                "üîç –ò–∑–≤–ª–µ–∫–∞—é –∫–∞–¥—Ä—ã..."
            )
            
            # Extract frames
            frames = await self.video_processor.extract_frames_from_video(temp_path)
            
            if not frames:
                await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ")
                self.video_processor.cleanup_temp_file(temp_path)
                return
            
            # Get user language
            user_language = self.language_handler.get_user_language(context)
            
            # Update progress
            await processing_msg.edit_text(
                f"üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(frames)} –∫–∞–¥—Ä–æ–≤\n"
                "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é Gemini..."
            )
            
            # Analyze with Gemini using user's language
            analysis_result = await self.gemini_client.analyze_video_frames(frames, user_language)
            
            # Update progress
            await processing_msg.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
            
            # Get video info for duration
            video_info = self.video_processor.get_video_info(temp_path)
            video_duration = video_info.get('duration', 60)  # Default to 60 seconds
            
            # Extract duration from analysis if not available
            if not video_duration or video_duration == 0:
                extracted_duration = self.openai_client.extract_video_duration(analysis_result)
                if extracted_duration:
                    video_duration = extracted_duration
                else:
                    video_duration = 60  # Default fallback
            
            # Create YouTube script with OpenAI using user's language
            youtube_script = await self.openai_client.create_youtube_script(
                analysis_result, video_duration, user_language
            )
            
            # Update progress
            await processing_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            # Send analysis result in separate blocks
            await self._send_analysis_blocks(message, analysis_result)
            
            # Send YouTube script
            script_message = f"üéôÔ∏è **–°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø YOUTUBE SHORTS**\n\n{youtube_script}"
            await message.reply_text(script_message, parse_mode=None)
            
            # Generate voice synthesis for the script
            await processing_msg.edit_text("üéôÔ∏è –°–æ–∑–¥–∞—é –æ–∑–≤—É—á–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è...")
            
            try:
                # Extract and synthesize script content
                audio_bytes = await self._synthesize_script(youtube_script, user_language)
                
                if audio_bytes:
                    # Create temporary file for audio
                    with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_audio:
                        temp_audio.write(audio_bytes)
                        temp_audio_path = Path(temp_audio.name)
                    
                    # Send voice message
                    with open(temp_audio_path, 'rb') as audio_file:
                        await message.reply_voice(
                            voice=audio_file,
                            caption="üéôÔ∏è –û–∑–≤—É—á–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–æ—Ç–æ–≤–∞!"
                        )
                    
                    # Cleanup audio file
                    self.elevenlabs_client.cleanup_temp_file(temp_audio_path)
                    logger.info("Successfully generated voice synthesis for script")
                else:
                    await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∑–≤—É—á–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è")
                    
            except Exception as voice_error:
                logger.error(f"Error generating voice synthesis: {voice_error}")
                error_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∑–≤—É—á–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è"
                
                # Check if it's a quota error
                if "quota_exceeded" in str(voice_error) or "credits remaining" in str(voice_error):
                    error_message = "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ ElevenLabs. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω."
                
                await message.reply_text(error_message)
            
            # Cleanup
            self.video_processor.cleanup_temp_file(temp_path)
            
            logger.info(f"Successfully processed video for user {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"Error handling video: {e}")
            try:
                await message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:\n{str(e)}"
                )
            except:
                pass
            
            # Cleanup on error
            if 'temp_path' in locals():
                self.video_processor.cleanup_temp_file(temp_path)
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle /start command.
        
        Args:
            update: Telegram update object
            context: Telegram context object
        """
        welcome_message = """
üé¨ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Video Analyzer Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Gemini AI –∏ —Å–æ–∑–¥–∞–µ—Ç:
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—É—é —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏ YouTube Shorts
‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

üìπ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ
4. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏

‚ö° **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {max_size}MB
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5 –º–∏–Ω—É—Ç

ü§ñ Powered by **Gemini AI** + **OpenAI GPT**
        """.format(max_size=Config.MAX_VIDEO_SIZE_MB)
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown'
        )
        
        logger.info(f"Sent welcome message to user {update.message.from_user.id}")
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle /help command.
        
        Args:
            update: Telegram update object
            context: Telegram context object
        """
        help_message = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Video Analyzer Bot**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üåç **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞:**
‚Ä¢ `/language` - –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
‚Ä¢ `/set_ru` - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∫
‚Ä¢ `/set_en` - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ üá∫üá∏  
‚Ä¢ `/set_es` - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫ üá™üá∏

üìπ **–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ:**
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ —á–∞—Ç
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É
3. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ –∞–Ω–∞–ª–∏–∑–∞, —Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ–∑–≤—É—á–∫–∏

üéôÔ∏è **–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑:**
‚Ä¢ `/voice_text [—Ç–µ–∫—Å—Ç]` - –û–∑–≤—É—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
‚Ä¢ `/voice_settings` - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏: {interval}—Å
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–∞–¥—Ä–æ–≤: {max_frames}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size}MB

üîß **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ MP4, AVI, MOV, WMV
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1920x1080

üí° **–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/voice_text –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

‚ùì **–ü—Ä–æ–±–ª–µ–º—ã?**
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
‚Ä¢ –í–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {max_size}MB
‚Ä¢ –§–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
‚Ä¢ –§–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """.format(
            interval=Config.FRAME_INTERVAL_SECONDS,
            max_frames=Config.MAX_FRAMES_PER_VIDEO,
            max_size=Config.MAX_VIDEO_SIZE_MB
        )
        
        await update.message.reply_text(
            help_message,
            parse_mode='Markdown'
        )
        
        # –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ callback
        test_keyboard = [[
            InlineKeyboardButton("üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏", callback_data="test_button")
        ]]
        await update.message.reply_text(
            "üß™ –¢–µ—Å—Ç inline –∫–Ω–æ–ø–∫–∏:",
            reply_markup=InlineKeyboardMarkup(test_keyboard)
        )
        
        logger.info(f"Sent help message to user {update.message.from_user.id}")
    
    async def handle_unknown(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle unknown messages (non-video).
        
        Args:
            update: Telegram update object
            context: Telegram context object
        """
        await update.message.reply_text(
            "üìπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
        logger.info(f"Received unknown message from user {update.message.from_user.id}")
    
    async def _synthesize_script(self, script_text: str, language: str = 'ru') -> bytes:
        """
        Synthesize script text to speech for automatic voice generation.
        
        Args:
            script_text: YouTube script text to synthesize
            language: Language code for voice selection
            
        Returns:
            bytes: Audio data or None if failed
        """
        try:
            # Get language configuration
            lang_config = Config.get_language_config(language)
            
            # Find the script section specifically
            lines = script_text.split('\n')
            script_content = []
            in_script_section = False
            
            # Look for different script section headers based on language
            script_headers = {
                'ru': "üéôÔ∏è **–°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –û–ó–í–£–ß–ö–ò:**",
                'en': "üéôÔ∏è **VOICE-OVER SCRIPT:**", 
                'es': "üéôÔ∏è **GUI√ìN DE NARRACI√ìN:**"
            }
            
            target_header = script_headers.get(language, script_headers['ru'])
            
            for line in lines:
                line = line.strip()
                
                # Start collecting after finding the script header
                if "üéôÔ∏è" in line and any(keyword in line for keyword in ["–°–¶–ï–ù–ê–†–ò–ô", "SCRIPT", "GUI√ìN"]):
                    in_script_section = True
                    continue
                    
                # Stop collecting when we hit other sections
                if in_script_section and (
                    line.startswith("üì∫") or 
                    line.startswith("üîë") or
                    line.startswith("**–í–ê–†–ò–ê–ù–¢–´ –ó–ê–ì–û–õ–û–í–ö–û–í") or
                    line.startswith("**–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê") or
                    line.startswith("**TITLE OPTIONS") or
                    line.startswith("**KEYWORDS") or
                    ("–ó–ê–ì–û–õ–û–í–ö–û–í" in line and "–í–ê–†–ò–ê–ù–¢–´" in line) or
                    ("–ö–õ–Æ–ß–ï–í–´–ï" in line and "–°–õ–û–í–ê" in line) or
                    ("TITLE" in line and "OPTIONS" in line) or
                    ("KEYWORDS" in line)
                ):
                    break
                    
                # Collect script content (skip empty lines and format markers)
                if in_script_section:
                    if (len(line) > 0 and 
                        not line.startswith('[') and 
                        not line.startswith('**') and
                        not line.startswith('#') and
                        not line == "---"):
                        script_content.append(line)
            
            # Join script content
            clean_script = ' '.join(script_content).strip()
            
            # Remove any remaining formatting markers
            clean_script = clean_script.replace('[', '').replace(']', '')
            
            if len(clean_script.strip()) == 0:
                logger.warning("No script content found for synthesis")
                return None
            
            # Limit length for TTS (moderate limit for better quality)
            if len(clean_script) > 1000:
                # Try to find a good break point near the limit
                truncated = clean_script[:1000]
                last_sentence = max(
                    truncated.rfind('.'),
                    truncated.rfind('!'),
                    truncated.rfind('?')
                )
                if last_sentence > 800:  # Only truncate at sentence if it's not too short
                    clean_script = truncated[:last_sentence + 1]
                else:
                    clean_script = truncated + "..."
            
            logger.info(f"Extracted script for synthesis ({len(clean_script)} chars): {clean_script[:100]}...")
            logger.debug(f"Full extracted script: {clean_script}")
            
            # Generate audio using ElevenLabs with language-specific voice
            audio_bytes = await self.elevenlabs_client.text_to_speech(
                clean_script, 
                voice_id=lang_config['elevenlabs_voice_id']
            )
            return audio_bytes
            
        except Exception as e:
            logger.error(f"Error synthesizing script: {e}")
            return None
    
    async def _send_analysis_blocks(self, message: Message, analysis_result: str) -> None:
        """
        Send analysis result as separate blocks.
        
        Args:
            message: Telegram message object to reply to
            analysis_result: Full analysis text to split into blocks
        """
        try:
            # Split the analysis into blocks based on headers
            blocks = []
            
            # Find each section by its header
            sections = [
                ("üìã **–û–ë–©–ï–ï –û–ü–ò–°–ê–ù–ò–ï:**", "‚è∞ **–†–ê–°–ö–ê–î–†–û–í–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò:**"),
                ("‚è∞ **–†–ê–°–ö–ê–î–†–û–í–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò:**", "üéØ **–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:**"),
                ("üéØ **–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:**", "üìù **–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:**"),
                ("üìù **–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:**", None)
            ]
            
            for start_marker, end_marker in sections:
                start_pos = analysis_result.find(start_marker)
                if start_pos != -1:
                    if end_marker:
                        end_pos = analysis_result.find(end_marker)
                        if end_pos != -1:
                            block_text = analysis_result[start_pos:end_pos].strip()
                        else:
                            block_text = analysis_result[start_pos:].strip()
                    else:
                        block_text = analysis_result[start_pos:].strip()
                    
                    if block_text:
                        blocks.append(block_text)
            
            # If no blocks found, send as single message
            if not blocks:
                await message.reply_text(f"üé¨ **–ê–ù–ê–õ–ò–ó –í–ò–î–ï–û**\n\n{analysis_result}", parse_mode=None)
                return
            
            # Send each block as separate message
            for block in blocks:
                await message.reply_text(block, parse_mode=None)
                # Small delay to avoid spam protection
                await asyncio.sleep(0.5)
                
        except Exception as e:
            logger.error(f"Error sending analysis blocks: {e}")
            # Fallback to single message
            await message.reply_text(f"üé¨ **–ê–ù–ê–õ–ò–ó –í–ò–î–ï–û**\n\n{analysis_result}", parse_mode=None)

class MessageHandler:
    """Handler for different types of messages."""
    
    def __init__(self):
        """Initialize message handler."""
        self.video_handler = VideoAnalysisHandler()
        logger.info("Initialized MessageHandler")
    
    async def route_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Route different types of messages to appropriate handlers.
        
        Args:
            update: Telegram update object
            context: Telegram context object
        """
        try:
            message = update.message
            
            if message.video:
                await self.video_handler.handle_video(update, context)
            else:
                await self.video_handler.handle_unknown(update, context)
                
        except Exception as e:
            logger.error(f"Error routing message: {e}")
            try:
                await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
            except:
                pass
