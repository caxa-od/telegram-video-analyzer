"""Config# –î–µ–±–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Environment Variables
print("üîß DEBUG: Checking environment variables...")
print(f"üîë DEBUG: TELEGRAM_BOT_TOKEN = {os.environ.get('TELEGRAM_BOT_TOKEN', 'NOT_SET')[:20]}...")
print(f"üîë DEBUG: GEMINI_API_KEY = {os.environ.get('GEMINI_API_KEY', 'NOT_SET')[:20]}...")
print(f"üîë DEBUG: ELEVENLABS_API_KEY = {os.environ.get('ELEVENLABS_API_KEY', 'NOT_SET')[:20]}...")
print(f"üîë DEBUG: OPENAI_API_KEY = {os.environ.get('OPENAI_API_KEY', 'NOT_SET')[:20]}...")settings for the Telegram Video Analyzer Bot."""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# –î–µ–±–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Environment Variables
print("üîß DEBUG: Checking environment variables...")
print(f"üîë DEBUG: TELEGRAM_BOT_TOKEN = {os.environ.get('TELEGRAM_BOT_TOKEN', 'NOT_SET')[:20]}...")
print(f"üîë DEBUG: GEMINI_API_KEY = {os.environ.get('GEMINI_API_KEY', 'NOT_SET')[:20]}...")
print(f"üîë DEBUG: ELEVENLABS_API_KEY = {os.environ.get('ELEVENLABS_API_KEY', 'NOT_SET')[:20]}...")
print(f"üîë DEBUG: OPENAI_API_KEY = {os.environ.get('OPENAI_API_KEY', 'NOT_SET')[:20]}...")

class Config:
    """Application configuration class."""
    
    # Telegram Bot Configuration
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    # Gemini AI Configuration
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    
    # OpenAI Configuration
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
    
    # ElevenLabs Configuration
    ELEVENLABS_API_KEY = os.getenv('ELEVENLABS_API_KEY')
    
    # Language Support Configuration
    SUPPORTED_LANGUAGES = {
        'ru': {
            'name': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
            'gemini_prompt_lang': '—Ä—É—Å—Å–∫–æ–º',
            'gpt_prompt_lang': '—Ä—É—Å—Å–∫–æ–º',
            'elevenlabs_voice_id': '1REYVgkHGlaFX4Rz9cPZ',  # Vasiliy
            'elevenlabs_voice_name': 'Vasiliy'
        },
        'en': {
            'name': 'üá∫üá∏ English',
            'gemini_prompt_lang': 'English',
            'gpt_prompt_lang': 'English',
            'elevenlabs_voice_id': 'EXAVITQu4vr4xnSDxMaL',  # Sarah
            'elevenlabs_voice_name': 'Sarah'
        },
        'es': {
            'name': 'üá™üá∏ Espa√±ol',
            'gemini_prompt_lang': 'Spanish',
            'gpt_prompt_lang': 'Spanish',
            'elevenlabs_voice_id': 'XrExE9yKIg1WjnnlVkGX',  # Mateo
            'elevenlabs_voice_name': 'Mateo'
        }
    }
    
    DEFAULT_LANGUAGE = 'ru'
    
        # Video Processing Configuration
    MAX_VIDEO_SIZE_MB = 50
    FRAME_INTERVAL_SECONDS = float(os.getenv('FRAME_INTERVAL_SECONDS', 5.0))
    MAX_FRAMES_PER_VIDEO = int(os.getenv('MAX_FRAMES_PER_VIDEO', 100))
    
    # Logging Configuration
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    
    # File Storage Configuration
    BASE_DIR = Path(__file__).parent
    TEMP_DIR = Path(os.getenv('TEMP_DIR', BASE_DIR / 'temp'))
    LOGS_DIR = Path(os.getenv('LOGS_DIR', BASE_DIR / 'logs'))
    
    # Create directories if they don't exist
    TEMP_DIR.mkdir(exist_ok=True)
    LOGS_DIR.mkdir(exist_ok=True)
    
    # Gemini Configuration
    GEMINI_MODEL = "gemini-2.5-flash"
    GEMINI_VISION_MODEL = "gemini-2.5-flash"
    
    # Language-specific prompts
    VIDEO_ANALYSIS_PROMPTS = {
        'ru': """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —ç—Ç–æ–º –≤–∏–¥–µ–æ –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–¥—Ä—ã –∏–∑ –í–°–ï–ì–û –≤–∏–¥–µ–æ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 —Å–µ–∫—É–Ω–¥. 
        
        –í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Å –í–ò–î–ï–û –¶–ï–õ–ò–ö–û–ú, –≤–∫–ª—é—á–∞—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–¥—Ä—ã –∏ –∫–æ–Ω—Ü–æ–≤–∫—É.
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
        üé¨ **–ê–ù–ê–õ–ò–ó –í–ò–î–ï–û**
        
        üìã **–û–ë–©–ï–ï –û–ü–ò–°–ê–ù–ò–ï:**
        [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –í–°–ï–ì–û —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–µ–æ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞]
        
        ‚è∞ **–†–ê–°–ö–ê–î–†–û–í–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò:**
        
        üïê **0:00-0:05** - [–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ]
        üïê **0:05-0:10** - [–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ]
        [–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ –ö–û–ù–¶–ê –≤–∏–¥–µ–æ...]
        
        üéØ **–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:**
        ‚Ä¢ [–í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç 1]
        ‚Ä¢ [–í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç 2]
        ‚Ä¢ [–í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç 3]
        
        üìù **–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:**
        [–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –æ –ü–û–õ–ù–û–ú –≤–∏–¥–µ–æ, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–≤—è–∑–∫—É –∏ —Ñ–∏–Ω–∞–ª]
        """,
        'en': """
        Analyze what is happening in this video, I want to see a storyboard with what is happening over time.
        
        The response structure should be:
        üé¨ **VIDEO ANALYSIS**
        
        üìã **GENERAL DESCRIPTION:**
        [Brief description of video content]
        
        ‚è∞ **TIMELINE BREAKDOWN:**
        
        üïê **0:00-0:05** - [Description of what's happening]
        üïê **0:05-0:10** - [Description of what's happening]
        [and so on...]
        
        üéØ **KEY MOMENTS:**
        ‚Ä¢ [Important moment 1]
        ‚Ä¢ [Important moment 2]
        ‚Ä¢ [Important moment 3]
        
        üìù **CONCLUSION:**
        [General conclusions about the video]
        """,
        'es': """
        Analiza lo que est√° pasando en este video, quiero ver un gui√≥n gr√°fico con lo que est√° pasando a lo largo del tiempo.
        
        La estructura de respuesta debe ser:
        üé¨ **AN√ÅLISIS DE VIDEO**
        
        üìã **DESCRIPCI√ìN GENERAL:**
        [Breve descripci√≥n del contenido del video]
        
        ‚è∞ **DESGLOSE TEMPORAL:**
        
        üïê **0:00-0:05** - [Descripci√≥n de lo que est√° pasando]
        üïê **0:05-0:10** - [Descripci√≥n de lo que est√° pasando]
        [y as√≠ sucesivamente...]
        
        üéØ **MOMENTOS CLAVE:**
        ‚Ä¢ [Momento importante 1]
        ‚Ä¢ [Momento importante 2]
        ‚Ä¢ [Momento importante 3]
        
        üìù **CONCLUSI√ìN:**
        [Conclusiones generales sobre el video]
        """
    }
    
    GPT_SCRIPT_PROMPTS = {
        'ru': """
        –°–¥–µ–ª–∞–π –º–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–∑–≤—É—á–∫–∏ –æ—Ç 3-–≥–æ –ª–∏—Ü–∞ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–æ—é {duration}, –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ {character_count} —Å–∏–º–≤–æ–ª–æ–≤. 
        –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥—É—à–µ–≤–Ω—ã–º –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫—Ä—É—Ç–æ–≥–æ –ª—É–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω—Ç—Ä–∏–≥—É –¥–æ —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ. 
        
        –¢–∞–∫–∂–µ –¥–∞–π –º–Ω–µ –æ—Ç–¥–µ–ª—å–Ω–æ:
        1. –¢—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º, –≤—ã–∑—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞ –∏ –∂–µ–ª–∞–Ω–∏–µ –¥–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –¥–æ –∫–æ–Ω—Ü–∞. 
        2. –ü–æ–¥–±–µ—Ä–∏ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤ –≤–∏–¥–µ–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–µ –≤–∏–¥–µ–æ –∏ –Ω–µ –±—ã—Ç—å —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–º–∏ –∏–ª–∏ –æ–±—â–∏–º–∏ –ø–æ —Å–º—ã—Å–ª—É. 
        
        –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        {video_description}
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        
        üéôÔ∏è **–°–¶–ï–ù–ê–†–ò–ô –î–õ–Ø –û–ó–í–£–ß–ö–ò:**
        [–°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤–∏–¥–µ–æ, —Ç–æ—á–Ω–æ {character_count} —Å–∏–º–≤–æ–ª–æ–≤]
        
        üì∫ **–í–ê–†–ò–ê–ù–¢–´ –ó–ê–ì–û–õ–û–í–ö–û–í:**
        1. [–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1]
        2. [–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2] 
        3. [–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3]
        
        üîë **–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê:**
        1. [–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 1]
        2. [–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 2]
        3. [–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 3]
        """,
        'en': """
        Create a third-person voice-over script for this video of {duration} duration, approximately {character_count} characters. 
        The video should be heartfelt and touching. The video must start with a compelling hook that maintains intrigue until the very end of the video.
        
        Also provide separately:
        1. Three title options that should be provocative, evoke curiosity and the desire to watch the video to the end.
        2. Pick 3 keywords based on what happens in the video - they should accurately match the video theme and not be vague or general in meaning.
        
        Video description for analysis:
        {video_description}
        
        Response structure:
        
        üéôÔ∏è **VOICE-OVER SCRIPT:**
        [Third-person text script for video voice-over, exactly {character_count} characters]
        
        üì∫ **TITLE OPTIONS:**
        1. [Title 1]
        2. [Title 2] 
        3. [Title 3]
        
        üîë **KEYWORDS:**
        1. [Keyword 1]
        2. [Keyword 2]
        3. [Keyword 3]
        """,
        'es': """
        Crea un gui√≥n de narraci√≥n en tercera persona para este video de {duration} de duraci√≥n, aproximadamente {character_count} caracteres.
        El video debe ser emotivo y conmovedor. El video debe comenzar con un gancho compelling que mantenga la intriga hasta el final del video.
        
        Tambi√©n proporciona por separado:
        1. Tres opciones de t√≠tulo que deben ser provocativos, evocar curiosidad y el deseo de ver el video hasta el final.
        2. Elige 3 palabras clave basadas en lo que sucede en el video - deben coincidir exactamente con el tema del video y no ser vagas o generales en significado.
        
        Descripci√≥n de video para an√°lisis:
        {video_description}
        
        Estructura de respuesta:
        
        üéôÔ∏è **GUI√ìN DE NARRACI√ìN:**
        [Gui√≥n de texto en tercera persona para narraci√≥n de video, exactamente {character_count} caracteres]
        
        üì∫ **OPCIONES DE T√çTULO:**
        1. [T√≠tulo 1]
        2. [T√≠tulo 2] 
        3. [T√≠tulo 3]
        
        üîë **PALABRAS CLAVE:**
        1. [Palabra clave 1]
        2. [Palabra clave 2]
        3. [Palabra clave 3]
        """
    }
    
    @classmethod
    def get_video_analysis_prompt(cls, language='ru'):
        """Get video analysis prompt for specified language."""
        return cls.VIDEO_ANALYSIS_PROMPTS.get(language, cls.VIDEO_ANALYSIS_PROMPTS[cls.DEFAULT_LANGUAGE])
    
    @classmethod
    def get_gpt_script_prompt(cls, language='ru'):
        """Get GPT script prompt for specified language."""
        return cls.GPT_SCRIPT_PROMPTS.get(language, cls.GPT_SCRIPT_PROMPTS[cls.DEFAULT_LANGUAGE])
    
    @classmethod
    def get_language_config(cls, language='ru'):
        """Get language configuration."""
        return cls.SUPPORTED_LANGUAGES.get(language, cls.SUPPORTED_LANGUAGES[cls.DEFAULT_LANGUAGE])
    
    @classmethod
    def validate_config(cls) -> bool:
        """Validate required configuration parameters."""
        required_vars = [
            'TELEGRAM_BOT_TOKEN',
            'GEMINI_API_KEY',
            'ELEVENLABS_API_KEY'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not getattr(cls, var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"Missing required environment variables: {', '.join(missing_vars)}")
            print("Please check your .env file")
            return False
        
        return True
